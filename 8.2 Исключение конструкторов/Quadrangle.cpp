#include <iostream>
#include "Figure.h"
#include "Quadrangle.h"


Quadrangle::Quadrangle(int a, int b) : Figure("Прямоугольник", 4) {
    this->a = a;
    this->b = b;
    c = a;
    d = b;
    A = 90;
    B = 90;
    C = 90;
    D = 90;
    if (A + B + C + D != 360) {
        throw "Ошибка создания фигуры Прямоугольник. Причина: сумма углов не равна 360.\n";
    }
    if (a <= 0 || b <= 0 || c <= 0 || d <= 0) {
        throw "Ошибка создания фигуры  Прямоугольник. Причина: стороны прямоугольника должны быть больше 0.\n";
    }
    if (sides_count != 4) {
        throw "Ошибка создания фигуры Прямоугольник. Причина: количество сторон прямоугольника должно быть равным 4.\n";
    };
    if (a != c || d != b) {
        throw "Ошибка создания фигуры Прямоугольник. Причина: противоположные стороны не равны.\n";
    };
    if (C != A || C != B || C != D) {
        throw "Ошибка создания фигуры Прямоугольник. Причина: углы не равны.\n";
    };
    
}
Quadrangle::Quadrangle(int a) : Figure("Квадрат", 4)
{
    this->a = a;
    b = c = d = a;
    A = 90;
    B = 90;
    C = 90;
    D = 90;
    
    if (A + B + C + D != 360) {
        throw "Ошибка создания фигуры Квадрат. Причина: сумма углов не равна 360.\n";
    }
    if (a <= 0 || b <= 0 || c <= 0 || d <= 0) {
        throw "Ошибка создания фигуры  Квадрат. Причина: стороны прямоугольника должны быть больше 0.\n";
    }
    if (sides_count != 4) {
        throw "Ошибка создания фигуры Квадрат. Причина: количество сторон квадрата должно быть равным 4.\n";
    };
    if (a != c || a != b || a != d ) {
        throw "Ошибка создания фигуры Квадрат. Причина:  стороны квадрата не равны.\n";
    };
    if (C != A || C != B || C != D) {
        throw "Ошибка создания фигуры Квадрат. Причина: углы не равны.\n";
    };
}

Quadrangle::Quadrangle(int a, int b, float A, float B) : Figure("Ромб", 4) {
    this->a = a;
    this->b = b;
    c = d = a;
    this->A = A;
    this->B = B;
    C = A;
    D = B;

    if (A + B + C + D != 360) {
        throw "Ошибка создания фигуры Ромб. Причина: сумма углов не равна 360.\n";
    }
    if (A <= 0 || B <= 0) {
        throw "Ошибка создания фигуры Ромб. Причина: Углы ромба должны быть больше 0.\n";
    }
    if (a <= 0 || b <= 0 || c <= 0 || d <= 0) {
        throw "Ошибка создания фигуры  Ромб. Причина: стороны прямоугольника должны быть больше 0.\n";
    }
    if (sides_count != 4) {
        throw "Ошибка создания фигуры Ромб. Причина: количество сторон ромба должно быть равным 4.\n";
    };
    if (a != c || a != b || a != d) {
        throw "Ошибка создания фигуры Ромб. Причина: стороны не равны.\n";
    };
    if (C != A || D != B) {
        throw "Ошибка создания фигуры Ромб. Причина: Противоположные углы не равны.\n";
    };
}
Quadrangle::Quadrangle(int a, int b, float A) : Figure("Параллелограмм", 4) {
    this->a = a;
    this->b = b;
    c = a;
    d = b;
    this->A = A;
    C = A;
    B = (360 - A * 2) / 2;
    D = B;
    
    if (A + B + C + D != 360) {
        throw "Ошибка создания фигуры Параллелограмм. Причина: сумма углов не равна 360.\n";
    }
    if (A <= 0 || B <= 0) {
        throw "Ошибка создания фигуры Параллелограмм. Причина: Углы параллелограмма должны быть больше 0.\n";
    }
    if (a <= 0 || b <= 0 || c <= 0 || d <= 0) {
        throw "Ошибка создания фигуры  Параллелограмм. Причина: стороны параллелограмма должны быть больше 0.\n";
    }
    if (sides_count != 4) {
        throw "Ошибка создания фигуры Параллелограмм. Причина: количество сторон параллелограмма должно быть равным 4.\n";
    };
    if (a != c || d != b) {
        throw "Ошибка создания фигуры Параллелограмм. Причина: противоположные стороны не равны.\n";
    };
    if (C != A || D != B) {
        throw "Ошибка создания фигуры Параллелограмм. Причина: Противоположные углы не равны.\n";
    };
}
Quadrangle::Quadrangle(int a, int b, int c, int d, float A, float B, float C, float D) : Figure("Четырёхугольник", 4), a(a), b(b), c(c), d(d), A(A), B(B), C(C), D(D) {

    if (A + B + C + D != 360) {
        throw "Ошибка создания фигуры Четырёхугольник. Причина: сумма углов не равна 360.\n";
    }
    if (A <= 0 || B <= 0) {
        throw "Ошибка создания фигуры Четырёхугольник. Причина: Углы четырёхугольника должны быть больше 0.\n";
    }
    if (a <= 0 || b <= 0 || c <= 0 || d <= 0) {
        throw "Ошибка создания фигуры  Четырёхугольник. Причина: стороны четырёхугольника должны быть больше 0.\n";
    }
    if (sides_count != 4) {
        throw "Ошибка создания фигуры Четырёхугольник. Причина: количество сторон четырёхугольника должно быть равным 4.\n";
    };
   

}

// Переопределение метода
void Quadrangle::get_info() {
    std::cout << "(стороны: " << "" << a << ", " << "" << b << ", " << "" << c << ", " << d  ;
    std::cout << " углы: " << "" << A << ", " << "" << B << ", " << "" << C << ", " << D << ") создан." << std::endl;
}

bool Quadrangle::check() {
    if (A + B + C + D == 360 && get_sides_count() == 4) {
        return true;
    }
    return false;
}
float Quadrangle::get_C() {
    return C;
}
float Quadrangle::get_A() {
    return A;
}
float Quadrangle::get_B() {
    return B;
}
float Quadrangle::get_D() {
    return D;
}
int Quadrangle::get_a() {
    return a;
}
int Quadrangle::get_c() {
    return c;
}
int Quadrangle::get_b() {
    return b;
}
int Quadrangle::get_d() {
    return d;
}

//метод установки значений углов многоугольника
void Quadrangle::set_Anle(float A, float B, float C, float D) {
    this->A = A;
    this->B = B;
    this->C = C;
    this->D = D;
}


